{"version":3,"sources":["utils/round.ts","utils/text.ts","components/Editor.tsx","components/TimelineChart.tsx","components/TimelineModal.tsx","components/LanguagesBarChart.tsx","containers/GridContainer.tsx","components/EmptyDataAlert.tsx","utils/intro.ts","layouts/Default.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["number","decimals","parseFloat","toFixed","isTextNeutral","value","natural","require","Analyzer","SentimentAnalyzer","stemmer","PorterStemmer","wordTokenizer","WordTokenizer","sentenceTokenizer","SentenceTokenizer","analyzer","Editor","onUpdateMetrics","highlight","useState","editor","setEditor","selectNode","setSelectNode","content","setContent","metrics","setMetrics","timeout","setEditTimeout","lastEdit","setLastEdit","ready","setReady","pasteDate","setPasteDate","getPlainText","formattedText","div","document","createElement","innerHTML","innerText","computeMetrics","paragraphTokens","paragraphs","matches","matchAll","exclude","forEach","match","sentence","trim","length","includes","push","extractParagraphs","plainContent","wordTokens","tokenize","sentiments","map","s","round","getSentiment","languages","Map","paragraph","get","sentences","consirededSentencesNumber","lang","franc","minLength","only","console","log","has","currentArray","keys","values","set","mean","reduce","firstSentiment","secondsentiment","variance","sentiment","val","val2","countWords","varianceScore","neutralityScore","acc","useEffect","clearTimeout","newTimeout","setTimeout","lastEditTime","getTime","diff","Date","editing","view","focus","model","change","writer","child","getRoot","getChild","start","createPositionAt","end","range","createRange","setSelection","viewRange","mapper","toViewRange","scrollViewportToShowTarget","target","domConverter","viewRangeToDom","viewportOffset","highlightNode","localEditor","node","color","startPos","startEnd","execute","removeHighlight","applyHighlight","localWriter","providedIndex","root","currentPosition","selection","getFirstPosition","index","text","getChildren","item","data","word","i","wordScore","indexOf","applyHighlightToAll","on","Form","Group","controlId","ClassicEditor","onReady","ed","config","plugins","Essentials","Bold","Italic","Paragraph","Heading","Highlight","toolbar","placeholder","onChange","_event","currentPos","path","getData","Text","className","TimelineChart","onLabelClicked","colorBlindness","getColor","res","colorPositive","colorNegative","chartData","datasets","label","fill","borderColor","pointBackgroundColor","pointBorderColor","pointHoverBackgroundColor","pointHoverBorderColor","pointStyle","pointBorderWidth","pointHoverBorderWidth","labels","style","height","onElementsClick","elements","first","_index","options","maintainAspectRatio","responsive","legend","boxWidth","scales","yAxes","display","ticks","maxTicksLimit","scaleLabel","labelString","xAxes","padding","zoom","pan","enabled","mode","TimelineModal","show","handleClose","showModal","setShow","handleModalClose","Modal","onHide","backdrop","size","Header","closeButton","Title","Body","Footer","Button","variant","onClick","colors","TabKey","LanguagesBarChart","onBarClicked","backgroundColor","borderWidth","stack","idx","getChartData","stacked","EmptyDataAlert","Alert","element","intro","position","GridContainer","showGuide","setShowGuide","GENERAL","tabKey","setTabKey","showTimelineModal","setShowTimelineModal","enableColorBlindness","setColorBlindness","highlightSequence","setHighlightSequence","onHighlightLabel","labelIndex","textIsNeutral","steps","introSteps","initialStep","onExit","onBeforeChange","nextStepIndex","LANGUAGES","OverlayTrigger","key","placement","overlay","Tooltip","id","ref","triggerHandler","disabled","icon","faQuestionCircle","Check","type","Row","Col","newMetrics","Tabs","defaultActiveKey","activeKey","onSelect","k","Tab","eventKey","title","faExpandAlt","faSmile","faGrimace","Default","children","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8aa866e7.chunk.js","sourcesContent":["export default function (number: number|string, decimals = 2): number {\r\n  return parseFloat(parseFloat(`${number}`).toFixed(decimals));\r\n};\r\n","export default function isTextNeutral (value: number): boolean {\r\n  const threshold = 0.1;\r\n\r\n  return value < threshold && value > -threshold;\r\n}\r\n","import React, { FunctionComponent, useEffect, useState } from \"react\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport { CKEditor } from \"@ckeditor/ckeditor5-react\";\r\nimport ClassicEditor from \"@ckeditor/ckeditor5-editor-classic/src/classiceditor\";\r\nimport Essentials from \"@ckeditor/ckeditor5-essentials/src/essentials\";\r\nimport Bold from \"@ckeditor/ckeditor5-basic-styles/src/bold\";\r\nimport Italic from \"@ckeditor/ckeditor5-basic-styles/src/italic\";\r\nimport Paragraph from \"@ckeditor/ckeditor5-paragraph/src/paragraph\";\r\nimport Heading from \"@ckeditor/ckeditor5-heading/src/heading\";\r\nimport Highlight from \"@ckeditor/ckeditor5-highlight/src/highlight\";\r\nimport { scrollViewportToShowTarget } from \"@ckeditor/ckeditor5-utils/src/dom/scroll\";\r\nimport franc from \"franc\";\r\nimport { Metrics } from \"../../types\";\r\nimport round from \"../utils/round\";\r\nimport isTextNeutral from \"../utils/text\";\r\n\r\nconst natural = require(\"natural\");\r\n\r\nconst Analyzer = natural.SentimentAnalyzer;\r\nconst stemmer = natural.PorterStemmer;\r\nconst wordTokenizer = new natural.WordTokenizer();\r\nconst sentenceTokenizer = new natural.SentenceTokenizer();\r\nconst analyzer = new Analyzer(\"English\", stemmer, \"afinn\");\r\n\r\ntype Props = {\r\n  onUpdateMetrics: (metrics: Metrics) => void;\r\n  highlight: number;\r\n};\r\n\r\nconst Editor: FunctionComponent<Props> = ({ onUpdateMetrics, highlight }) => {\r\n  const [editor, setEditor] = useState<any>(null);\r\n  const [selectNode, setSelectNode] = useState<number>(highlight);\r\n  const [content, setContent] = useState<string>(\"\");\r\n  const [metrics, setMetrics] = useState<Metrics | null>(null);\r\n  const [timeout, setEditTimeout] = useState<NodeJS.Timeout | null>(null);\r\n  const [lastEdit, setLastEdit] = useState<Date | null>(null);\r\n  const [ready, setReady] = useState<boolean>(false);\r\n  const [pasteDate, setPasteDate] = useState<Date | null>(null);\r\n\r\n  const getPlainText = (formattedText: string) => {\r\n    const div: HTMLElement = document.createElement(\"div\");\r\n    div.innerHTML = formattedText;\r\n    return div.innerText;\r\n  };\r\n\r\n  const extractParagraphs = (): string[] => {\r\n    const paragraphs: string[] = [];\r\n    const matches = [...content.matchAll(/p>(.*?)<\\/p/g)];\r\n    const exclude: string[] = [\"&nbsp;\"];\r\n\r\n    matches.forEach((match) => {\r\n      const sentence = getPlainText(match[1] ?? \"\").trim();\r\n      if (sentence.length > 0 && !exclude.includes(sentence)) {\r\n        paragraphs.push(sentence);\r\n      }\r\n    });\r\n\r\n    return paragraphs;\r\n  };\r\n\r\n  const computeMetrics = () => {\r\n    const paragraphTokens: string[] = extractParagraphs();\r\n    const plainContent = getPlainText(content);\r\n\r\n    const wordTokens: string[] = wordTokenizer.tokenize(plainContent);\r\n    const sentiments: number[] = paragraphTokens.map((s) =>\r\n      round(analyzer.getSentiment(wordTokenizer.tokenize(s)) || 0)\r\n    );\r\n    const languages = new Map<string, number[]>([\r\n      [\"eng\", []],\r\n      [\"deu\", []],\r\n      [\"fra\", []],\r\n      [\"ita\", []],\r\n    ]);\r\n\r\n    paragraphTokens.forEach((paragraph) => {\r\n      // sentenceTokens.For each sentence\r\n      let t = languages.get(\"eng\")?.push(0);\r\n      t = languages.get(\"deu\")?.push(0);\r\n      t = languages.get(\"fra\")?.push(0);\r\n      t = languages.get(\"ita\")?.push(0);\r\n      const sentences: string[] = sentenceTokenizer.tokenize(paragraph);\r\n      let consirededSentencesNumber = sentences.length;\r\n\r\n      sentences.forEach((sentence) => {\r\n        const lang = franc(sentence, {\r\n          minLength: 5,\r\n          only: [\"fra\", \"eng\", \"deu\", \"ita\"],\r\n        });\r\n\r\n        console.log(`lang: ${lang}`);\r\n\r\n        if (languages.has(lang)) {\r\n          const currentArray = languages.get(lang) ?? [];\r\n          currentArray[currentArray.length - 1 ?? -1] += 1;\r\n        } else {\r\n          // undefined returned\r\n          consirededSentencesNumber -= 1;\r\n        }\r\n      });\r\n\r\n      /*\r\n      // [!!] Generator usage\r\n      for (const [, nb] of languages) {\r\n        console.log('AAA', nb);\r\n        nb[nb.length-1] = nb[nb.length-1] / consirederSentencesNumber;\r\n      }\r\n      */\r\n\r\n      [...languages.keys()].forEach((lang) => {\r\n        const values = [...(languages.get(lang) ?? [])];\r\n        values[values.length - 1] =\r\n        round(values[values.length - 1] / consirededSentencesNumber);\r\n        languages.set(lang, values);\r\n      });\r\n    });\r\n\r\n    const mean =\r\n      sentiments.reduce(\r\n        (firstSentiment, secondsentiment) => firstSentiment + secondsentiment,\r\n        0\r\n      ) / sentiments.length;\r\n    const meanTot = sentiments.map((sentiment) => (sentiment - mean) ** 2);\r\n    const variance =\r\n      meanTot.reduce((val, val2) => val + val2, 0) / sentiments.length ?? 0;\r\n\r\n    setMetrics({\r\n      countWords: wordTokens.length,\r\n      varianceScore: round(variance),\r\n      sentiments,\r\n      neutralityScore: round(\r\n        sentiments.reduce((acc, sentiment) => acc + sentiment, 0) /\r\n          sentiments.length\r\n      ),\r\n      languages,\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Delete previous timeout\r\n    if (timeout) {\r\n      clearTimeout(timeout);\r\n      setEditTimeout(null);\r\n    }\r\n\r\n    const newTimeout = setTimeout(() => {\r\n      const lastEditTime = lastEdit ? lastEdit.getTime() : 2000;\r\n      const diff = new Date().getTime() - lastEditTime;\r\n      const threshold = 500;\r\n\r\n      if (lastEdit && diff > threshold) {\r\n        // onUpdate(getPlainText(content));\r\n        computeMetrics();\r\n      }\r\n\r\n      if (timeout) {\r\n        clearTimeout(timeout);\r\n      }\r\n      setEditTimeout(null);\r\n    }, 1000);\r\n\r\n    setEditTimeout(newTimeout);\r\n\r\n    setLastEdit(new Date());\r\n  }, [content]);\r\n\r\n  useEffect(() => {\r\n    if (!metrics) {\r\n      return;\r\n    }\r\n\r\n    onUpdateMetrics(metrics);\r\n  }, [metrics]);\r\n\r\n  const setNodeSelection = () => {\r\n    // Triggers model change (https://ckeditor.com/docs/ckeditor5/latest/framework/guides/deep-dive/ui/focus-tracking.html)\r\n    editor.editing.view.focus();\r\n\r\n    editor.model.change((writer) => {\r\n      const root = editor.model.document.getRoot();\r\n      const child = root.getChild(highlight);\r\n      const start = writer.createPositionAt(child, 0);\r\n      const end = writer.createPositionAt(child, \"end\");\r\n      const range = writer.createRange(start, end);\r\n\r\n      writer.setSelection(range);\r\n\r\n      setSelectNode(highlight);\r\n\r\n      const viewRange = editor.editing.mapper.toViewRange(range);\r\n\r\n      scrollViewportToShowTarget({\r\n        target: editor.editing.view.domConverter.viewRangeToDom(viewRange),\r\n        viewportOffset: 0,\r\n      });\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (selectNode === highlight) {\r\n      return;\r\n    }\r\n\r\n    setNodeSelection();\r\n  }, [highlight]);\r\n\r\n  const highlightNode = (\r\n    localEditor,\r\n    writer,\r\n    node,\r\n    color: string,\r\n    startPos: number | string = 0,\r\n    startEnd: number | string = \"end\"\r\n  ) => {\r\n    const start = writer.createPositionAt(node, startPos);\r\n    const end = writer.createPositionAt(node, startEnd);\r\n\r\n    writer.setSelection(writer.createRange(start, end));\r\n\r\n    localEditor.execute(\"highlight\", {\r\n      value: `${color}Marker`,\r\n    });\r\n  };\r\n\r\n  const removeHighlight = (\r\n    localEditor,\r\n    writer,\r\n    node,\r\n    startPos: number | string = 0,\r\n    startEnd: number | string = \"end\"\r\n  ) => {\r\n    const start = writer.createPositionAt(node, startPos);\r\n    const end = writer.createPositionAt(node, startEnd);\r\n\r\n    writer.setSelection(writer.createRange(start, end));\r\n\r\n    localEditor.execute(\"highlight\");\r\n  };\r\n\r\n  const applyHighlight = (\r\n    localEditor,\r\n    localWriter,\r\n    providedIndex: number | null = null\r\n  ) => {\r\n    const root = localEditor.model.document.getRoot();\r\n    const currentPosition = localEditor.model.document.selection.getFirstPosition();\r\n\r\n    let index = providedIndex || 0;\r\n\r\n    while (index !== null) {\r\n      const child = root.getChild(index);\r\n\r\n      if (!child) {\r\n        break;\r\n      }\r\n\r\n      const text = [...child?.getChildren()].reduce(\r\n        (acc, item) => acc + item.data,\r\n        \"\"\r\n      );\r\n      const words = wordTokenizer.tokenize(text ?? \"\");\r\n\r\n      words.forEach((word, i) => {\r\n        const wordScore = analyzer.getSentiment([word]) ?? 0;\r\n        const start = text.indexOf(word);\r\n        const end = start + word.length;\r\n\r\n        if (isTextNeutral(wordScore)) {\r\n          // Reset\r\n          removeHighlight(localEditor, localWriter, child, start, end);\r\n          return;\r\n        }\r\n\r\n        // Apply color\r\n        highlightNode(\r\n          localEditor,\r\n          localWriter,\r\n          child,\r\n          wordScore < 0 ? \"pink\" : \"green\",\r\n          start,\r\n          end\r\n        );\r\n      });\r\n\r\n      index += 1;\r\n\r\n      if (providedIndex !== null) {\r\n        break;\r\n      }\r\n    }\r\n\r\n    // Re-apply current cursor position\r\n    localWriter.setSelection(currentPosition, \"end\");\r\n  };\r\n\r\n  const applyHighlightToAll = () => {\r\n    // On change will be triggered\r\n    setPasteDate(new Date());\r\n  };\r\n\r\n  const onChange = (_event, localEditor) => {\r\n    localEditor.model.change((writer) => {\r\n      if (pasteDate) {\r\n        const isPasteAction = new Date().getTime() - pasteDate.getTime() < 500;\r\n\r\n        if (isPasteAction) {\r\n          applyHighlight(localEditor, writer);\r\n          return;\r\n        }\r\n      }\r\n\r\n      const currentPos = localEditor.model.document.selection.getFirstPosition();\r\n\r\n      applyHighlight(localEditor, writer, currentPos.path[0]);\r\n    });\r\n\r\n    const data = editor.getData();\r\n\r\n    setContent(data);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (editor) {\r\n      setReady(true);\r\n    }\r\n\r\n    if (editor && !ready) {\r\n      editor.editing.view.document.on(\"clipboardInput\", applyHighlightToAll);\r\n    }\r\n  }, [editor]);\r\n\r\n  return (\r\n    <Form.Group controlId=\"editor\">\r\n      <CKEditor\r\n        editor={ClassicEditor}\r\n        onReady={(ed) => setEditor(ed)}\r\n        config={{\r\n          plugins: [Essentials, Bold, Italic, Paragraph, Heading, Highlight],\r\n          toolbar: [\"heading\", \"|\", \"bold\", \"italic\"],\r\n          placeholder: \"Write your text\",\r\n        }}\r\n        data={content}\r\n        onChange={onChange}\r\n      />\r\n\r\n      {timeout && (\r\n        <Form.Text className=\"text-muted\">\r\n          Metrics are calculated once you stop writing\r\n        </Form.Text>\r\n      )}\r\n    </Form.Group>\r\n  );\r\n};\r\n\r\nexport default Editor;\r\n","import React, { FunctionComponent } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport isTextNeutral from '../utils/text';\r\n\r\ntype Props = {\r\n  data: number[],\r\n  colorBlindness: boolean,\r\n  onLabelClicked: (labelIndex: number) => void,\r\n};\r\n\r\nconst TimelineChart: FunctionComponent<Props> = ({ data, onLabelClicked, colorBlindness }) => {\r\n  const getColor = (res: number) => {\r\n    const colorPositive = colorBlindness ? '#90caf9' : '#a5d6a7';\r\n    const colorNegative = colorBlindness ? '#ffef61' : '#ef9a9a';\r\n\r\n    if (isTextNeutral(res)) {\r\n      return '#333';\r\n    }\r\n\r\n    if (res > 0) {\r\n      return colorPositive;\r\n    }\r\n\r\n    return colorNegative;\r\n  };\r\n\r\n  const chartData = {\r\n    datasets: [{\r\n      data,\r\n      label: 'Sentiment per paragraph',\r\n      fill: false,\r\n      borderColor: '#333',\r\n      pointBackgroundColor: data.map((res) => getColor(res)),\r\n      pointBorderColor: data.map((res) => getColor(res)),\r\n      pointHoverBackgroundColor: data.map((res) => getColor(res)),\r\n      pointHoverBorderColor: data.map((res) => getColor(res)),\r\n      pointStyle: 'rect',\r\n      pointBorderWidth: 10,\r\n      pointHoverBorderWidth: 14,\r\n    }],\r\n    labels: data.map((s, i) => `${i + 1}`),\r\n  };\r\n\r\n  const onElementClick = (elements) => {\r\n    if (elements.length === 0) {\r\n      return;\r\n    }\r\n\r\n    const [first] = elements;\r\n\r\n    onLabelClicked(first._index);\r\n  };\r\n\r\n  return (\r\n    <div className=\"timeline-chart-container\" style={{ height: '200px' }}>\r\n      <Line\r\n        data={chartData}\r\n        height={200}\r\n        onElementsClick={onElementClick}\r\n        options={{\r\n          maintainAspectRatio: false,\r\n          responsive: true,\r\n          legend: {\r\n            labels: {\r\n              boxWidth: 0,\r\n            },\r\n          },\r\n          scales: {\r\n            yAxes: [{\r\n              display: true,\r\n              ticks: {\r\n                maxTicksLimit: 5,\r\n              },\r\n              scaleLabel: {\r\n                display: true,\r\n                labelString: 'Sentiment score',\r\n              },\r\n            }],\r\n            xAxes: [{\r\n              ticks: {\r\n                padding: 20,\r\n              },\r\n              scaleLabel: {\r\n                display: true,\r\n                labelString: '# Paragraph',\r\n              },\r\n            }],\r\n          },\r\n\t\t\t\t\tplugins: {\r\n\t\t\t\t\t\tzoom: {\r\n\t\t\t\t\t\t\tpan: {\r\n\t\t\t\t\t\t\t\tenabled: true,\r\n\t\t\t\t\t\t\t\tmode: 'x',\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tzoom: {\r\n\t\t\t\t\t\t\t\tenabled: true,\r\n\t\t\t\t\t\t\t\tmode: 'x',\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t},\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TimelineChart;\r\n","import React, { FunctionComponent, useEffect , useState } from 'react';\r\n\r\nimport { Button, Modal } from 'react-bootstrap';\r\nimport { TimelineChartData } from '../../types';\r\nimport TimelineChart from './TimelineChart';\r\n\r\ntype Props = {\r\n  show: boolean,\r\n  chartData: TimelineChartData,\r\n  colorBlindness: boolean,\r\n  handleClose: () => void,\r\n};\r\n\r\nconst TimelineModal: FunctionComponent<Props> = ({ show, chartData, handleClose, colorBlindness }) => {\r\n  const [showModal, setShow] = useState(show);\r\n\r\n  useEffect(() => {\r\n    setShow(show);\r\n  }, [show])\r\n\r\n  const handleModalClose = () => handleClose();\r\n\r\n  return (\r\n    <Modal\r\n      show={showModal}\r\n      onHide={handleModalClose}\r\n      backdrop\r\n      size=\"lg\"\r\n    >\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>Sentiment timeline</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <TimelineChart\r\n          colorBlindness={colorBlindness}\r\n          data={chartData.data}\r\n          onLabelClicked={chartData.onLabelClicked}\r\n        />\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        <Button variant=\"secondary\" onClick={handleModalClose}>Close</Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default TimelineModal;\r\n","import React, { FunctionComponent } from 'react';\r\nimport { Chart } from 'chart.js';\r\nimport { Bar } from 'react-chartjs-2';\r\n\r\ntype Props = {\r\n  data: Map<string, number[]>,\r\n  onBarClicked: (labelIndex: number) => void,\r\n};\r\n\r\nconst colors = [\r\n  '#ef5350',\r\n  '#333',\r\n  '#9b59b6',\r\n  '#80cbc4',\r\n  '#90caf9',\r\n];\r\n\r\nfunction getChartData(data: Map<string, number[]>) {\r\n  // 1 dataset per language\r\n  const keys = [...data.keys()];\r\n  const datasets: Chart.ChartDataSets[] = [];\r\n\r\n  keys.forEach((lang, i) => {\r\n    datasets.push({\r\n      label: lang,\r\n      backgroundColor: colors[i],\r\n      borderColor: colors[i],\r\n      borderWidth: 1,\r\n      stack: `${lang}-${i}`,\r\n      data: data.get(lang),\r\n    });\r\n  });\r\n\r\n  return {\r\n    datasets,\r\n    labels: (data.get('eng')??[]).map((value, idx) => `${idx + 1}`)\r\n  };\r\n}\r\n\r\nconst LanguagesBarChart: FunctionComponent<Props> = ({ data, onBarClicked }) => {\r\n  const chartData = getChartData(data);\r\n\r\n  const onElementClick = (elements) => {\r\n    if (elements.length === 0) {\r\n      return;\r\n    }\r\n\r\n    const [first] = elements;\r\n\r\n    onBarClicked(first._index);\r\n  };\r\n\r\n  return (\r\n    <div className=\"languages-chart-container\" style={{ height: '200px' }}>\r\n      <Bar\r\n        data={chartData}\r\n        height={200}\r\n        onElementsClick={onElementClick}\r\n        options={{\r\n          maintainAspectRatio: false,\r\n          responsive: true,\r\n          scales: {\r\n            yAxes: [{\r\n              stacked: true,\r\n              display: true,\r\n              ticks: {\r\n                maxTicksLimit: 5,\r\n              },\r\n              scaleLabel: {\r\n                display: true,\r\n                labelString: 'Sentiment score',\r\n              },\r\n            }],\r\n            xAxes: [{\r\n              stacked: true,\r\n              ticks: {\r\n                padding: 20,\r\n              },\r\n              scaleLabel: {\r\n                display: true,\r\n                labelString: '# Paragraph',\r\n              },\r\n            }],\r\n          },\r\n\t\t\t\t\tplugins: {\r\n\t\t\t\t\t\tzoom: {\r\n\t\t\t\t\t\t\tpan: {\r\n\t\t\t\t\t\t\t\tenabled: true,\r\n\t\t\t\t\t\t\t\tmode: 'x',\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tzoom: {\r\n\t\t\t\t\t\t\t\tenabled: true,\r\n\t\t\t\t\t\t\t\tmode: 'x',\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t},\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LanguagesBarChart;","import React, { FunctionComponent, ReactNode, useState } from 'react';\r\nimport {\r\n  Row,\r\n  Col,\r\n  Tabs,\r\n  Tab,\r\n  Button,\r\n  Form,\r\n  OverlayTrigger,\r\n  Tooltip,\r\n} from 'react-bootstrap';\r\nimport { Steps } from 'intro.js-react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faExpandAlt, faGrimace, faQuestionCircle, faSmile } from '@fortawesome/free-solid-svg-icons'\r\nimport { Metrics } from '../../types';\r\nimport Editor from '../components/Editor';\r\nimport TimelineChart from '../components/TimelineChart';\r\nimport TimelineModal from '../components/TimelineModal';\r\nimport LanguagesBarChart from '../components/LanguagesBarChart';\r\nimport EmptyDataAlert from '../components/EmptyDataAlert';\r\nimport isTextNeutral from '../utils/text';\r\nimport introSteps from '../utils/intro';\r\n\r\ntype Props = {\r\n  children?: ReactNode;\r\n};\r\n\r\nenum TabKey {\r\n  GENERAL = 'General',\r\n  LANGUAGES = 'Languages',\r\n}\r\n\r\nconst GridContainer: FunctionComponent<Props> = () => {\r\n  const [showGuide, setShowGuide] = useState<boolean>(true);\r\n  const [tabKey, setTabKey] = useState<TabKey|null>(TabKey.GENERAL);\r\n  const [showTimelineModal, setShowTimelineModal] = useState<boolean>(false);\r\n  const [enableColorBlindness, setColorBlindness] = useState<boolean>(false);\r\n  const [metrics, setMetrics] = useState<Metrics | null>(null);\r\n  const [highlightSequence, setHighlightSequence] = useState<number>(-1);\r\n\r\n  const onUpdateMetrics = (newMetrics) => {\r\n    setMetrics(newMetrics);\r\n  };\r\n\r\n  const onHighlightLabel = (labelIndex: number) => {\r\n    setHighlightSequence(labelIndex);\r\n  };\r\n\r\n  const textIsNeutral = isTextNeutral(metrics?.neutralityScore ?? 0);\r\n\r\n  const onStepChange = (nextStepIndex: number) => {\r\n    if (nextStepIndex >= 5) {\r\n      if (tabKey !== TabKey.LANGUAGES) {\r\n        setTabKey(TabKey.LANGUAGES);\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    if (TabKey.GENERAL !== tabKey) {\r\n      setTabKey(TabKey.GENERAL);\r\n    }\r\n  };\r\n\r\n  const onExit = () => {\r\n    setShowGuide(false);\r\n    setTabKey(TabKey.GENERAL);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {metrics && (\r\n        <TimelineModal\r\n          show={showTimelineModal}\r\n          colorBlindness={enableColorBlindness}\r\n          handleClose={() => setShowTimelineModal(false)} chartData={{\r\n          data: metrics.sentiments,\r\n          onLabelClicked: onHighlightLabel,\r\n        }} />\r\n      )}\r\n\r\n      <Steps\r\n        enabled={metrics !== null && showGuide}\r\n        steps={introSteps}\r\n        initialStep={0}\r\n        onExit={onExit}\r\n        onBeforeChange={onStepChange}\r\n      />\r\n\r\n      <h3 className=\"mt-5 mb-3 text-muted\">\r\n        Compose neutral text easily\r\n      </h3>\r\n\r\n      <main className={enableColorBlindness ? 'enable-color-blindness' : ''}>\r\n        <div className=\"d-flex align-items-center justify-content-between\">\r\n          <OverlayTrigger\r\n            key=\"overlay-help\"\r\n            placement=\"top\"\r\n            overlay={\r\n              <Tooltip id=\"tooltip-overlay-help\">\r\n                {metrics === null && (\r\n                  <>Start by writing some text below!</>\r\n                )}\r\n                {metrics !== null && (\r\n                  <>Follow our guide!</>\r\n                )}\r\n              </Tooltip>\r\n            }\r\n          >\r\n            {({ ref, ...triggerHandler }) => (\r\n              // eslint-disable-next-line react/jsx-props-no-spreading\r\n              <Button variant=\"light\" disabled={metrics === null} onClick={() => setShowGuide(true)} ref={ref} {...triggerHandler}>\r\n                <FontAwesomeIcon icon={faQuestionCircle} onClick={() => setShowGuide(true)} />\r\n                <span className=\"ml-3\">Help</span>\r\n              </Button>\r\n            )}\r\n          </OverlayTrigger>\r\n\r\n          <Form.Check\r\n            type=\"switch\"\r\n            id=\"switch-accessibility\"\r\n            onChange={() => setColorBlindness(!enableColorBlindness)}\r\n            value={enableColorBlindness ? 'checked' : ''}\r\n            label=\"Enable coloring for colorblindness\"\r\n          />\r\n        </div>\r\n\r\n        <Row className=\"bg-white p-3\">\r\n          <Col>\r\n            <Editor\r\n              onUpdateMetrics={onUpdateMetrics}\r\n              highlight={highlightSequence}\r\n            />\r\n          </Col>\r\n          <Col>\r\n            <Tabs defaultActiveKey={TabKey.GENERAL} activeKey={tabKey} onSelect={(k) => setTabKey(k as TabKey)}>\r\n              <Tab eventKey={TabKey.GENERAL} title={TabKey.GENERAL}>\r\n                {!metrics && (\r\n                  <EmptyDataAlert />\r\n                )}\r\n\r\n                <div className=\"p-3\">\r\n                  {metrics && (\r\n                    <>\r\n                      <Button className=\"float-right\" variant=\"link\" size=\"sm\" onClick={() => setShowTimelineModal(true)}>\r\n                        Increase chart size\r\n                        <FontAwesomeIcon className=\"ml-1\" icon={faExpandAlt} />\r\n                      </Button>\r\n\r\n                      <TimelineChart\r\n                        colorBlindness={enableColorBlindness}\r\n                        data={metrics.sentiments}\r\n                        onLabelClicked={onHighlightLabel}\r\n                        \r\n                      />\r\n                      <Row className=\"text-center mt-5\">\r\n                        <Col className=\"col-separator\">\r\n                          <h3 className=\"text-muted\">{metrics.countWords}</h3>\r\n                          Words\r\n                        </Col>\r\n                        <Col className=\"neutrality-score col-separator\">\r\n                          <h3 className=\"text-muted\">\r\n                            {metrics.neutralityScore}\r\n                            <FontAwesomeIcon className={textIsNeutral ? 'ml-2 icon-success' : 'icon-warning'} icon={textIsNeutral ? faSmile : faGrimace } />\r\n                          </h3>\r\n                          Neutrality score\r\n                        </Col>\r\n                        <Col className=\"neutrality-variance\">\r\n                          <h3 className=\"text-muted\">{metrics.varianceScore}</h3>\r\n                          Neutrality variance\r\n                        </Col>\r\n                      </Row>\r\n                    </>\r\n                  )}\r\n                </div>\r\n              </Tab>\r\n\r\n              <Tab className=\"languages-tab\" eventKey={TabKey.LANGUAGES} title={TabKey.LANGUAGES}>\r\n                {!metrics && (\r\n                  <EmptyDataAlert />\r\n                )}\r\n                {metrics && (\r\n                  <LanguagesBarChart data={metrics.languages}\r\n                  onBarClicked={onHighlightLabel}\r\n                  />\r\n                )}\r\n              </Tab>\r\n            </Tabs>\r\n          </Col>\r\n        </Row>\r\n      </main>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GridContainer;\r\n","import React, { FunctionComponent } from 'react';\r\nimport { Alert } from 'react-bootstrap';\r\n\r\nconst EmptyDataAlert: FunctionComponent = () => {\r\n  return (\r\n    <Alert variant=\"info\">Please write some text in the editor.</Alert>\r\n  );\r\n};\r\n\r\nexport default EmptyDataAlert;\r\n","export default [\r\n  {\r\n    element: '.timeline-chart-container',\r\n    intro: 'The sentiment score is negative when it is below 0 and positive when the score is above 0. The value 0 represents a perfect neutrality score.',\r\n    position: 'top',\r\n  },\r\n  {\r\n    element: '.timeline-chart-container',\r\n    intro: 'Click on a square point to focus the item in the editor.',\r\n    position: 'left',\r\n  },\r\n  {\r\n    element: '.timeline-chart-container',\r\n    intro: 'Scroll in the chart to zoom in or zoom out.',\r\n    position: 'top',\r\n  },\r\n  {\r\n    element: '.neutrality-score',\r\n    intro: 'The overall neutrality score is displayed here.',\r\n    position: 'top',\r\n  },\r\n  {\r\n    element: '.neutrality-variance',\r\n    intro: 'The variance measures how far a set of numbers is spread out from their average value.',\r\n    position: 'top',\r\n  },\r\n  {\r\n    element: '[data-rb-event-key=\"Languages\"]',\r\n    intro: 'Let\\'s move to the language tab',\r\n    position: 'top',\r\n  },\r\n  {\r\n    element: '.languages-tab',\r\n    intro: 'Here we detect the languages. You can identify words used in different languages.',\r\n    position: 'top',\r\n  },\r\n  {\r\n    element: '.custom-switch',\r\n    intro: 'Finally, you might want to enable coloring for colorblindness',\r\n    position: 'top',\r\n  },\r\n];\r\n","import React, { FunctionComponent, ReactNode } from 'react';\n\ntype Props = {\n  children: ReactNode;\n}\n\nconst Default: FunctionComponent<Props> = ({ children }) => {\n  return (\n    <div className=\"container main-container\">\n      {children}\n    </div>\n  );\n}\n\nexport default Default;\n","import React from 'react';\r\nimport GridContainer from './containers/GridContainer';\r\nimport DefaultLayout from './layouts/Default';\r\n\r\nimport 'intro.js/introjs.css';\r\nimport './App.scss';\r\n\r\n// Plugins\r\nimport './plugins/chart';\r\n\r\nfunction App() {\r\n  return (\r\n    <DefaultLayout>\r\n      <GridContainer></GridContainer>\r\n    </DefaultLayout>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}